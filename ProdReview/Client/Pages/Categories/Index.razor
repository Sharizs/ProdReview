@page "/categories/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Category</h3>

<a href="/categories/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Category
</a>
<br />
<br />

@if (Categories == null)
{
    <div class="alert alert-info">Loading Categories...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Category Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in Categories)
            {
                <tr>
                    <td>@category.CatName</td>
                   
                    <td>
                        <a href="/categories/view/@category.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/categories/edit/@category.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(category.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Category> Categories;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>("api/categories");
    }

    async Task Delete(int categoryId)
    {
        var category = Categories.First(q => q.Id == categoryId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {category.CatName}?");
        if (confirm)

        {
            await _client.DeleteAsync($"api/categories/{categoryId}");
            await OnInitializedAsync();
        }
    }

}
