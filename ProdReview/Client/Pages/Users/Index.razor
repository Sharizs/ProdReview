@page "/users/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Users</h3>

<a href="/users/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New User
</a>
<br />
<br />

@if (User1 == null)
{
    <div class="alert alert-info">Loading Users...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>User Name</th>
                <th>User Email</th>
                <th>User Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in User1)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.UserEmail</td>
                    <td>@user.UserRole</td>
                    <td>
                        <a href="/users/view/@user.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/users/edit/@user.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(user.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User> User1;

    protected async override Task OnInitializedAsync()
    {
        User1 = await _client.GetFromJsonAsync<List<User>>("api/users");
    }

    async Task Delete(int userId)
    {
        var user = User1.First(q => q.Id == userId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {user.UserName}?");
        if (confirm)

        {
            await _client.DeleteAsync($"api/users/{userId}");
            await OnInitializedAsync();
        }
    }

}
